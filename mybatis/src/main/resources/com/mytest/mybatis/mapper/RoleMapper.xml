<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mytest.mybatis.mapper.RoleMapper">
  
  <resultMap id="base_result_map" type="com.mytest.mybatis.model.Role">
    <!--jdbcType的定义见org.apache.ibatis.type.JdbcType-->
    <id column="id" jdbcType="INTEGER" property="id"/>
    <!--jdbcType不写也能自动识别-->
    <result column="role_name" property="roleName"/>
    <result column="note" property="note"/>
  </resultMap>
  
  <sql id="base_column_list">
    role.id, role.role_name,role.note
  </sql>
  <sql id="converted_column_list">
    role.id as id, role.role_name as roleName,role.note as note
  </sql>
  
  <!--此处的parameterType使用mybatis-config中声明的类型别名-->
  <insert id="insertRole" parameterType="role">
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleName != null">
        role_name,
      </if>
      <if test="note != null and note != ''">
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <!--注意加',' 否则roleName和note会拼接起来作为role_name插入数据库，造成column数量不匹配SQL报错-->
      <if test="roleName != null">
        #{roleName}
      </if>
      <if test="note != null and note != ''">
        #{note},
      </if>
      <if test="note != null and note != ''">
        #{note},
      </if>
    </trim>
  </insert>
  
  <delete id="deleteRole" parameterType="com.mytest.mybatis.model.Role">
    delete from role where id = #{id}
  </delete>
  <delete id="deleteRole2">
    delete from role where id = #{role.id}
  </delete>
  
  <update id="updateRole">
    update role
    <set>
      <if test="roleName != null">
        role_name = #{roleName},
      </if>
      <if test="note != null">
        <!--jdbcType的定义见enum org.apache.ibatis.type.JdbcType,都是大写-->
        note = #{note,jdbcType = VARCHAR},
      </if>
    </set>
    <where>
      <if test="id != null">
        id = #{id}
      </if>
    </where>
  </update>
  
  <!--为column起别名，与bean的属性名对应即可,可以不区分大小写，不用驼峰命名法-->
  <select id="queryWithConvertedColumn" parameterType="long" resultType="com.mytest.mybatis.model.Role" >
    select <include refid="converted_column_list"/> from role where id = #{id}
  </select>
  
  <select id="queryWithResultMap" resultMap="base_result_map" databaseId="mariaDB">
    select <include refid="base_column_list"/>
    from role
    <where>
      id = #{id}
    </where>
  </select>
  
  <select id="findRoles" resultType="com.mytest.mybatis.model.Role" parameterType="list">
    <if test="names != null and names.size > 0">
      select <include refid="converted_column_list"/>
      from role
      where role_name in
      <foreach collection="names" item="name" open="(" separator="," close=")">
        #{name}
      </foreach>
    </if>
  </select>

  <select id="getRoles4Plugin" resultType="com.mytest.mybatis.model.Role">
    select <include refid="converted_column_list"/>
    from role
    where id > #{fromIndex}
  </select>

  <!--
    关于mybatis动态SQL之trim的灵活运用
    需求：动态拼接筛选条件，筛选条件可能全为null，没有一个是确定一定会存在的
    具体是： 根据学生ID或老师ID筛选，两个必有其一，如果只有studentId就只筛studentId，如果只有teacherId就只筛teacherId，
    如果两个都有就采用studentId and teacherId + (studentId and type = 22)，业务上叫做关系查询，但type=22的数据不支持关系也要查出来，
    除了studentId teacherId还有其他筛选条件
   -->
  <sql id="screenConditions">
    <trim prefix="(" suffix=")" prefixOverrides="and">
      <if test="studentId != null">
        and student_id = #{studentId}
      </if>
      <if test="teacherId != null">
        and teacher_id = #{teacherId}
      </if>
      <if test="studentId != null and teacherId != null">
        or (student_id = #{studentId} and type = 22)
      </if>
    </trim>
    <if test="statusSet != null and statusSet.size > 0">
      and status in (1,3,5)
    </if>
  </sql>
  <!--
    此案例的point在于说明上面trim一行作用
    1.由于and条件前面有and，而studentId和teacherId不能确定哪一个必有，动态SQL容易出现where and ...,使用trim的prefixOverride可以去掉第一个and
    2.在mysql里and优先级高于or，所以 A and B or C and D = (A and B) or (C and D)
      但上面的筛选条件是要id先筛选，所以要加括号 (A and B or C) and D , trim优雅地支持这个

    前面的应用场景中是对结尾的逗号做去除，使用的是 suffixOverride = ","
    其实 <where> 就是 <trim prefixOverride='AND'>
  -->


</mapper>